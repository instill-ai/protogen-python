"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import agent.agent.v1alpha.agent_pb2
import agent.agent.v1alpha.chat_pb2
import agent.agent.v1alpha.table_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class AgentPublicServiceStub:
    """AgentPublicService exposes the public endpoints that allow clients to
    manage agents.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Liveness: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.agent_pb2.LivenessRequest,
        agent.agent.v1alpha.agent_pb2.LivenessResponse,
    ]
    """Check if the agent server is alive

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
    """
    Readiness: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.agent_pb2.ReadinessRequest,
        agent.agent.v1alpha.agent_pb2.ReadinessResponse,
    ]
    """Check if the agent server is ready

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    CreateChat: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.CreateChatRequest,
        agent.agent.v1alpha.chat_pb2.CreateChatResponse,
    ]
    """Create a chat

    Creates a chat.
    """
    ListChats: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.ListChatsRequest,
        agent.agent.v1alpha.chat_pb2.ListChatsResponse,
    ]
    """List chats

    Returns a list of chats.
    """
    UpdateChat: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.UpdateChatRequest,
        agent.agent.v1alpha.chat_pb2.UpdateChatResponse,
    ]
    """Update a chat

    Updates a chat.
    """
    GetChat: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.GetChatRequest,
        agent.agent.v1alpha.chat_pb2.GetChatResponse,
    ]
    """Get a chat

    Gets a chat.
    """
    DeleteChat: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.DeleteChatRequest,
        agent.agent.v1alpha.chat_pb2.DeleteChatResponse,
    ]
    """Delete a chat

    Deletes a chat.
    """
    CreateMessage: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.CreateMessageRequest,
        agent.agent.v1alpha.chat_pb2.CreateMessageResponse,
    ]
    """Create a message

    Creates a message.
    """
    ListMessages: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.ListMessagesRequest,
        agent.agent.v1alpha.chat_pb2.ListMessagesResponse,
    ]
    """List messages

    Returns a paginated list of messages.
    """
    UpdateMessage: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.UpdateMessageRequest,
        agent.agent.v1alpha.chat_pb2.UpdateMessageResponse,
    ]
    """Update a message

    Updates a message.
    """
    DeleteMessage: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.DeleteMessageRequest,
        agent.agent.v1alpha.chat_pb2.DeleteMessageResponse,
    ]
    """Delete a message

    Deletes a message.
    """
    Chat: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.ChatRequest,
        agent.agent.v1alpha.chat_pb2.ChatResponse,
    ]
    """Chat

    Chat sends a message asynchronously and streams back the response.
    This method is intended for real-time conversation with a chatbot
    and the response needs to be processed incrementally.
    """
    BindChatTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.BindChatTableRequest,
        agent.agent.v1alpha.table_pb2.BindChatTableResponse,
    ]
    """Bind table to chat

    Binds a table to a chat.
    """
    UnbindChatTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UnbindChatTableRequest,
        agent.agent.v1alpha.table_pb2.UnbindChatTableResponse,
    ]
    """Unbind table from chat

    Unbinds a table from a chat.
    """
    ListChatTables: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ListChatTablesRequest,
        agent.agent.v1alpha.table_pb2.ListChatTablesResponse,
    ]
    """List chat tables

    Returns a list of tables bound to a chat.
    """
    ListTables: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ListTablesRequest,
        agent.agent.v1alpha.table_pb2.ListTablesResponse,
    ]
    """List tables

    Returns a paginated list of tables.
    """
    CreateTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.CreateTableRequest,
        agent.agent.v1alpha.table_pb2.CreateTableResponse,
    ]
    """Create a table

    Creates a table.
    """
    GetTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.GetTableRequest,
        agent.agent.v1alpha.table_pb2.GetTableResponse,
    ]
    """Get table

    Gets a table.
    """
    UpdateTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateTableRequest,
        agent.agent.v1alpha.table_pb2.UpdateTableResponse,
    ]
    """Update table

    Updates a table.
    """
    DeleteTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.DeleteTableRequest,
        agent.agent.v1alpha.table_pb2.DeleteTableResponse,
    ]
    """Delete table

    Deletes a table.
    """
    GetColumnDefinitions: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.GetColumnDefinitionsRequest,
        agent.agent.v1alpha.table_pb2.GetColumnDefinitionsResponse,
    ]
    """Get column definitions

    Gets column definitions for a table.
    """
    UpdateColumnDefinitions: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateColumnDefinitionsRequest,
        agent.agent.v1alpha.table_pb2.UpdateColumnDefinitionsResponse,
    ]
    """Update column definitions

    Updates column definitions for a table.
    """
    ListRows: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ListRowsRequest,
        agent.agent.v1alpha.table_pb2.ListRowsResponse,
    ]
    """List rows

    Returns list of rows.
    """
    InsertRow: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.InsertRowRequest,
        agent.agent.v1alpha.table_pb2.InsertRowResponse,
    ]
    """Insert row

    Inserts a row into a table.
    """
    UpdateRow: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateRowRequest,
        agent.agent.v1alpha.table_pb2.UpdateRowResponse,
    ]
    """Update row

    Updates a row in a table.
    """
    UpdateRows: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateRowsRequest,
        agent.agent.v1alpha.table_pb2.UpdateRowsResponse,
    ]
    """Update rows

    Updates multiple rows in a table.
    """
    DeleteRow: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.DeleteRowRequest,
        agent.agent.v1alpha.table_pb2.DeleteRowResponse,
    ]
    """Delete row

    Deletes a row from a table.
    """
    DeleteRows: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.DeleteRowsRequest,
        agent.agent.v1alpha.table_pb2.DeleteRowsResponse,
    ]
    """Delete rows

    Deletes multiple rows from a table.
    """
    MoveRows: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.MoveRowsRequest,
        agent.agent.v1alpha.table_pb2.MoveRowsResponse,
    ]
    """Move row

    Moves a row to a new position in a table.
    """
    GetTableEvents: grpc.UnaryStreamMultiCallable[
        agent.agent.v1alpha.table_pb2.GetTableEventsRequest,
        agent.agent.v1alpha.table_pb2.GetTableEventsResponse,
    ]
    """Get table events

    Returns a list of events for a table.
    """
    ExportTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ExportTableRequest,
        agent.agent.v1alpha.table_pb2.ExportTableResponse,
    ]
    """Export table

    Exports table data.
    """
    GenerateMockTable: grpc.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.GenerateMockTableRequest,
        agent.agent.v1alpha.table_pb2.GenerateMockTableResponse,
    ]
    """Generate mock table

    Generates mock table data.
    This API is only available for internal use to generate mock row data for testing purposes.
    It should not be used in production environments.
    """

class AgentPublicServiceAsyncStub:
    """AgentPublicService exposes the public endpoints that allow clients to
    manage agents.
    """

    Liveness: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.agent_pb2.LivenessRequest,
        agent.agent.v1alpha.agent_pb2.LivenessResponse,
    ]
    """Check if the agent server is alive

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
    """
    Readiness: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.agent_pb2.ReadinessRequest,
        agent.agent.v1alpha.agent_pb2.ReadinessResponse,
    ]
    """Check if the agent server is ready

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    CreateChat: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.CreateChatRequest,
        agent.agent.v1alpha.chat_pb2.CreateChatResponse,
    ]
    """Create a chat

    Creates a chat.
    """
    ListChats: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.ListChatsRequest,
        agent.agent.v1alpha.chat_pb2.ListChatsResponse,
    ]
    """List chats

    Returns a list of chats.
    """
    UpdateChat: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.UpdateChatRequest,
        agent.agent.v1alpha.chat_pb2.UpdateChatResponse,
    ]
    """Update a chat

    Updates a chat.
    """
    GetChat: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.GetChatRequest,
        agent.agent.v1alpha.chat_pb2.GetChatResponse,
    ]
    """Get a chat

    Gets a chat.
    """
    DeleteChat: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.DeleteChatRequest,
        agent.agent.v1alpha.chat_pb2.DeleteChatResponse,
    ]
    """Delete a chat

    Deletes a chat.
    """
    CreateMessage: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.CreateMessageRequest,
        agent.agent.v1alpha.chat_pb2.CreateMessageResponse,
    ]
    """Create a message

    Creates a message.
    """
    ListMessages: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.ListMessagesRequest,
        agent.agent.v1alpha.chat_pb2.ListMessagesResponse,
    ]
    """List messages

    Returns a paginated list of messages.
    """
    UpdateMessage: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.UpdateMessageRequest,
        agent.agent.v1alpha.chat_pb2.UpdateMessageResponse,
    ]
    """Update a message

    Updates a message.
    """
    DeleteMessage: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.DeleteMessageRequest,
        agent.agent.v1alpha.chat_pb2.DeleteMessageResponse,
    ]
    """Delete a message

    Deletes a message.
    """
    Chat: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.chat_pb2.ChatRequest,
        agent.agent.v1alpha.chat_pb2.ChatResponse,
    ]
    """Chat

    Chat sends a message asynchronously and streams back the response.
    This method is intended for real-time conversation with a chatbot
    and the response needs to be processed incrementally.
    """
    BindChatTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.BindChatTableRequest,
        agent.agent.v1alpha.table_pb2.BindChatTableResponse,
    ]
    """Bind table to chat

    Binds a table to a chat.
    """
    UnbindChatTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UnbindChatTableRequest,
        agent.agent.v1alpha.table_pb2.UnbindChatTableResponse,
    ]
    """Unbind table from chat

    Unbinds a table from a chat.
    """
    ListChatTables: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ListChatTablesRequest,
        agent.agent.v1alpha.table_pb2.ListChatTablesResponse,
    ]
    """List chat tables

    Returns a list of tables bound to a chat.
    """
    ListTables: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ListTablesRequest,
        agent.agent.v1alpha.table_pb2.ListTablesResponse,
    ]
    """List tables

    Returns a paginated list of tables.
    """
    CreateTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.CreateTableRequest,
        agent.agent.v1alpha.table_pb2.CreateTableResponse,
    ]
    """Create a table

    Creates a table.
    """
    GetTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.GetTableRequest,
        agent.agent.v1alpha.table_pb2.GetTableResponse,
    ]
    """Get table

    Gets a table.
    """
    UpdateTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateTableRequest,
        agent.agent.v1alpha.table_pb2.UpdateTableResponse,
    ]
    """Update table

    Updates a table.
    """
    DeleteTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.DeleteTableRequest,
        agent.agent.v1alpha.table_pb2.DeleteTableResponse,
    ]
    """Delete table

    Deletes a table.
    """
    GetColumnDefinitions: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.GetColumnDefinitionsRequest,
        agent.agent.v1alpha.table_pb2.GetColumnDefinitionsResponse,
    ]
    """Get column definitions

    Gets column definitions for a table.
    """
    UpdateColumnDefinitions: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateColumnDefinitionsRequest,
        agent.agent.v1alpha.table_pb2.UpdateColumnDefinitionsResponse,
    ]
    """Update column definitions

    Updates column definitions for a table.
    """
    ListRows: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ListRowsRequest,
        agent.agent.v1alpha.table_pb2.ListRowsResponse,
    ]
    """List rows

    Returns list of rows.
    """
    InsertRow: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.InsertRowRequest,
        agent.agent.v1alpha.table_pb2.InsertRowResponse,
    ]
    """Insert row

    Inserts a row into a table.
    """
    UpdateRow: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateRowRequest,
        agent.agent.v1alpha.table_pb2.UpdateRowResponse,
    ]
    """Update row

    Updates a row in a table.
    """
    UpdateRows: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.UpdateRowsRequest,
        agent.agent.v1alpha.table_pb2.UpdateRowsResponse,
    ]
    """Update rows

    Updates multiple rows in a table.
    """
    DeleteRow: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.DeleteRowRequest,
        agent.agent.v1alpha.table_pb2.DeleteRowResponse,
    ]
    """Delete row

    Deletes a row from a table.
    """
    DeleteRows: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.DeleteRowsRequest,
        agent.agent.v1alpha.table_pb2.DeleteRowsResponse,
    ]
    """Delete rows

    Deletes multiple rows from a table.
    """
    MoveRows: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.MoveRowsRequest,
        agent.agent.v1alpha.table_pb2.MoveRowsResponse,
    ]
    """Move row

    Moves a row to a new position in a table.
    """
    GetTableEvents: grpc.aio.UnaryStreamMultiCallable[
        agent.agent.v1alpha.table_pb2.GetTableEventsRequest,
        agent.agent.v1alpha.table_pb2.GetTableEventsResponse,
    ]
    """Get table events

    Returns a list of events for a table.
    """
    ExportTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.ExportTableRequest,
        agent.agent.v1alpha.table_pb2.ExportTableResponse,
    ]
    """Export table

    Exports table data.
    """
    GenerateMockTable: grpc.aio.UnaryUnaryMultiCallable[
        agent.agent.v1alpha.table_pb2.GenerateMockTableRequest,
        agent.agent.v1alpha.table_pb2.GenerateMockTableResponse,
    ]
    """Generate mock table

    Generates mock table data.
    This API is only available for internal use to generate mock row data for testing purposes.
    It should not be used in production environments.
    """

class AgentPublicServiceServicer(metaclass=abc.ABCMeta):
    """AgentPublicService exposes the public endpoints that allow clients to
    manage agents.
    """

    @abc.abstractmethod
    def Liveness(
        self,
        request: agent.agent.v1alpha.agent_pb2.LivenessRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.agent_pb2.LivenessResponse, collections.abc.Awaitable[agent.agent.v1alpha.agent_pb2.LivenessResponse]]:
        """Check if the agent server is alive

        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        """
    @abc.abstractmethod
    def Readiness(
        self,
        request: agent.agent.v1alpha.agent_pb2.ReadinessRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.agent_pb2.ReadinessResponse, collections.abc.Awaitable[agent.agent.v1alpha.agent_pb2.ReadinessResponse]]:
        """Check if the agent server is ready

        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
        """
    @abc.abstractmethod
    def CreateChat(
        self,
        request: agent.agent.v1alpha.chat_pb2.CreateChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.CreateChatResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.CreateChatResponse]]:
        """Create a chat

        Creates a chat.
        """
    @abc.abstractmethod
    def ListChats(
        self,
        request: agent.agent.v1alpha.chat_pb2.ListChatsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.ListChatsResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.ListChatsResponse]]:
        """List chats

        Returns a list of chats.
        """
    @abc.abstractmethod
    def UpdateChat(
        self,
        request: agent.agent.v1alpha.chat_pb2.UpdateChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.UpdateChatResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.UpdateChatResponse]]:
        """Update a chat

        Updates a chat.
        """
    @abc.abstractmethod
    def GetChat(
        self,
        request: agent.agent.v1alpha.chat_pb2.GetChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.GetChatResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.GetChatResponse]]:
        """Get a chat

        Gets a chat.
        """
    @abc.abstractmethod
    def DeleteChat(
        self,
        request: agent.agent.v1alpha.chat_pb2.DeleteChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.DeleteChatResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.DeleteChatResponse]]:
        """Delete a chat

        Deletes a chat.
        """
    @abc.abstractmethod
    def CreateMessage(
        self,
        request: agent.agent.v1alpha.chat_pb2.CreateMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.CreateMessageResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.CreateMessageResponse]]:
        """Create a message

        Creates a message.
        """
    @abc.abstractmethod
    def ListMessages(
        self,
        request: agent.agent.v1alpha.chat_pb2.ListMessagesRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.ListMessagesResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.ListMessagesResponse]]:
        """List messages

        Returns a paginated list of messages.
        """
    @abc.abstractmethod
    def UpdateMessage(
        self,
        request: agent.agent.v1alpha.chat_pb2.UpdateMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.UpdateMessageResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.UpdateMessageResponse]]:
        """Update a message

        Updates a message.
        """
    @abc.abstractmethod
    def DeleteMessage(
        self,
        request: agent.agent.v1alpha.chat_pb2.DeleteMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.DeleteMessageResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.DeleteMessageResponse]]:
        """Delete a message

        Deletes a message.
        """
    @abc.abstractmethod
    def Chat(
        self,
        request: agent.agent.v1alpha.chat_pb2.ChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.chat_pb2.ChatResponse, collections.abc.Awaitable[agent.agent.v1alpha.chat_pb2.ChatResponse]]:
        """Chat

        Chat sends a message asynchronously and streams back the response.
        This method is intended for real-time conversation with a chatbot
        and the response needs to be processed incrementally.
        """
    @abc.abstractmethod
    def BindChatTable(
        self,
        request: agent.agent.v1alpha.table_pb2.BindChatTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.BindChatTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.BindChatTableResponse]]:
        """Bind table to chat

        Binds a table to a chat.
        """
    @abc.abstractmethod
    def UnbindChatTable(
        self,
        request: agent.agent.v1alpha.table_pb2.UnbindChatTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.UnbindChatTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.UnbindChatTableResponse]]:
        """Unbind table from chat

        Unbinds a table from a chat.
        """
    @abc.abstractmethod
    def ListChatTables(
        self,
        request: agent.agent.v1alpha.table_pb2.ListChatTablesRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.ListChatTablesResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.ListChatTablesResponse]]:
        """List chat tables

        Returns a list of tables bound to a chat.
        """
    @abc.abstractmethod
    def ListTables(
        self,
        request: agent.agent.v1alpha.table_pb2.ListTablesRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.ListTablesResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.ListTablesResponse]]:
        """List tables

        Returns a paginated list of tables.
        """
    @abc.abstractmethod
    def CreateTable(
        self,
        request: agent.agent.v1alpha.table_pb2.CreateTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.CreateTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.CreateTableResponse]]:
        """Create a table

        Creates a table.
        """
    @abc.abstractmethod
    def GetTable(
        self,
        request: agent.agent.v1alpha.table_pb2.GetTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.GetTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.GetTableResponse]]:
        """Get table

        Gets a table.
        """
    @abc.abstractmethod
    def UpdateTable(
        self,
        request: agent.agent.v1alpha.table_pb2.UpdateTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.UpdateTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.UpdateTableResponse]]:
        """Update table

        Updates a table.
        """
    @abc.abstractmethod
    def DeleteTable(
        self,
        request: agent.agent.v1alpha.table_pb2.DeleteTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.DeleteTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.DeleteTableResponse]]:
        """Delete table

        Deletes a table.
        """
    @abc.abstractmethod
    def GetColumnDefinitions(
        self,
        request: agent.agent.v1alpha.table_pb2.GetColumnDefinitionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.GetColumnDefinitionsResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.GetColumnDefinitionsResponse]]:
        """Get column definitions

        Gets column definitions for a table.
        """
    @abc.abstractmethod
    def UpdateColumnDefinitions(
        self,
        request: agent.agent.v1alpha.table_pb2.UpdateColumnDefinitionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.UpdateColumnDefinitionsResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.UpdateColumnDefinitionsResponse]]:
        """Update column definitions

        Updates column definitions for a table.
        """
    @abc.abstractmethod
    def ListRows(
        self,
        request: agent.agent.v1alpha.table_pb2.ListRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.ListRowsResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.ListRowsResponse]]:
        """List rows

        Returns list of rows.
        """
    @abc.abstractmethod
    def InsertRow(
        self,
        request: agent.agent.v1alpha.table_pb2.InsertRowRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.InsertRowResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.InsertRowResponse]]:
        """Insert row

        Inserts a row into a table.
        """
    @abc.abstractmethod
    def UpdateRow(
        self,
        request: agent.agent.v1alpha.table_pb2.UpdateRowRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.UpdateRowResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.UpdateRowResponse]]:
        """Update row

        Updates a row in a table.
        """
    @abc.abstractmethod
    def UpdateRows(
        self,
        request: agent.agent.v1alpha.table_pb2.UpdateRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.UpdateRowsResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.UpdateRowsResponse]]:
        """Update rows

        Updates multiple rows in a table.
        """
    @abc.abstractmethod
    def DeleteRow(
        self,
        request: agent.agent.v1alpha.table_pb2.DeleteRowRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.DeleteRowResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.DeleteRowResponse]]:
        """Delete row

        Deletes a row from a table.
        """
    @abc.abstractmethod
    def DeleteRows(
        self,
        request: agent.agent.v1alpha.table_pb2.DeleteRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.DeleteRowsResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.DeleteRowsResponse]]:
        """Delete rows

        Deletes multiple rows from a table.
        """
    @abc.abstractmethod
    def MoveRows(
        self,
        request: agent.agent.v1alpha.table_pb2.MoveRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.MoveRowsResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.MoveRowsResponse]]:
        """Move row

        Moves a row to a new position in a table.
        """
    @abc.abstractmethod
    def GetTableEvents(
        self,
        request: agent.agent.v1alpha.table_pb2.GetTableEventsRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[agent.agent.v1alpha.table_pb2.GetTableEventsResponse], collections.abc.AsyncIterator[agent.agent.v1alpha.table_pb2.GetTableEventsResponse]]:
        """Get table events

        Returns a list of events for a table.
        """
    @abc.abstractmethod
    def ExportTable(
        self,
        request: agent.agent.v1alpha.table_pb2.ExportTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.ExportTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.ExportTableResponse]]:
        """Export table

        Exports table data.
        """
    @abc.abstractmethod
    def GenerateMockTable(
        self,
        request: agent.agent.v1alpha.table_pb2.GenerateMockTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[agent.agent.v1alpha.table_pb2.GenerateMockTableResponse, collections.abc.Awaitable[agent.agent.v1alpha.table_pb2.GenerateMockTableResponse]]:
        """Generate mock table

        Generates mock table data.
        This API is only available for internal use to generate mock row data for testing purposes.
        It should not be used in production environments.
        """

def add_AgentPublicServiceServicer_to_server(servicer: AgentPublicServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
