"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _CatalogType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CatalogTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CatalogType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    CATALOG_TYPE_UNSPECIFIED: _CatalogType.ValueType  # 0
    """UNSPECIFIED"""
    CATALOG_TYPE_PERSISTENT: _CatalogType.ValueType  # 1
    """PERSISTENT"""
    CATALOG_TYPE_EPHEMERAL: _CatalogType.ValueType  # 2
    """EPHEMERAL"""

class CatalogType(_CatalogType, metaclass=_CatalogTypeEnumTypeWrapper):
    """Catalog Type. e.g. "persistent" or "ephemeral" """

CATALOG_TYPE_UNSPECIFIED: CatalogType.ValueType  # 0
"""UNSPECIFIED"""
CATALOG_TYPE_PERSISTENT: CatalogType.ValueType  # 1
"""PERSISTENT"""
CATALOG_TYPE_EPHEMERAL: CatalogType.ValueType  # 2
"""EPHEMERAL"""
global___CatalogType = CatalogType

@typing_extensions.final
class Catalog(google.protobuf.message.Message):
    """Catalog represents a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class EmbeddingConfig(google.protobuf.message.Message):
        """EmbeddingConfig defines the embedding configuration for a catalog"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_FAMILY_FIELD_NUMBER: builtins.int
        DIMENSIONALITY_FIELD_NUMBER: builtins.int
        model_family: builtins.str
        """The AI model family used for embeddings (e.g., "gemini", "openai")"""
        dimensionality: builtins.int
        """The dimensionality of the embedding vectors"""
        def __init__(
            self,
            *,
            model_family: builtins.str = ...,
            dimensionality: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["dimensionality", b"dimensionality", "model_family", b"model_family"]) -> None: ...

    UID_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CREATE_TIME_FIELD_NUMBER: builtins.int
    UPDATE_TIME_FIELD_NUMBER: builtins.int
    OWNER_NAME_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    CONVERTING_PIPELINES_FIELD_NUMBER: builtins.int
    SPLITTING_PIPELINES_FIELD_NUMBER: builtins.int
    EMBEDDING_PIPELINES_FIELD_NUMBER: builtins.int
    DOWNSTREAM_APPS_FIELD_NUMBER: builtins.int
    TOTAL_FILES_FIELD_NUMBER: builtins.int
    TOTAL_TOKENS_FIELD_NUMBER: builtins.int
    USED_STORAGE_FIELD_NUMBER: builtins.int
    SUMMARIZING_PIPELINES_FIELD_NUMBER: builtins.int
    EMBEDDING_CONFIG_FIELD_NUMBER: builtins.int
    ACTIVE_COLLECTION_UID_FIELD_NUMBER: builtins.int
    uid: builtins.str
    """The catalog uid (internal UUID)."""
    id: builtins.str
    """The catalog id (user-provided or system-generated)."""
    name: builtins.str
    """The resource name of the catalog.
    Format: `namespaces/{namespace}/catalogs/{catalog}`.
    """
    description: builtins.str
    """The catalog description."""
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The creation time of the catalog."""
    @property
    def update_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """The last update time of the catalog."""
    owner_name: builtins.str
    """The owner/namespace of the catalog."""
    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The catalog tags."""
    @property
    def converting_pipelines(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The catalog converting pipelines.
        Deprecated: Conversion is now handled by AI providers.
        """
    @property
    def splitting_pipelines(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The catalog splitting pipelines.
        Deprecated: Chunking is now handled internally.
        """
    @property
    def embedding_pipelines(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The catalog embedding pipelines.
        Deprecated: Use embedding_config instead.
        """
    @property
    def downstream_apps(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The downstream apps"""
    total_files: builtins.int
    """The total files in catalog."""
    total_tokens: builtins.int
    """The total tokens in catalog."""
    used_storage: builtins.int
    """The current used storage in catalog."""
    @property
    def summarizing_pipelines(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The catalog summarizing pipelines.
        Deprecated: Summarization is now handled by AI providers.
        """
    @property
    def embedding_config(self) -> global___Catalog.EmbeddingConfig:
        """The embedding configuration for the catalog."""
    active_collection_uid: builtins.str
    """The UID of the active Milvus collection for this catalog.
    This supports collection versioning for embedding dimension changes.
    """
    def __init__(
        self,
        *,
        uid: builtins.str = ...,
        id: builtins.str = ...,
        name: builtins.str = ...,
        description: builtins.str = ...,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        update_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        owner_name: builtins.str = ...,
        tags: collections.abc.Iterable[builtins.str] | None = ...,
        converting_pipelines: collections.abc.Iterable[builtins.str] | None = ...,
        splitting_pipelines: collections.abc.Iterable[builtins.str] | None = ...,
        embedding_pipelines: collections.abc.Iterable[builtins.str] | None = ...,
        downstream_apps: collections.abc.Iterable[builtins.str] | None = ...,
        total_files: builtins.int = ...,
        total_tokens: builtins.int = ...,
        used_storage: builtins.int = ...,
        summarizing_pipelines: collections.abc.Iterable[builtins.str] | None = ...,
        embedding_config: global___Catalog.EmbeddingConfig | None = ...,
        active_collection_uid: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["create_time", b"create_time", "embedding_config", b"embedding_config", "update_time", b"update_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["active_collection_uid", b"active_collection_uid", "converting_pipelines", b"converting_pipelines", "create_time", b"create_time", "description", b"description", "downstream_apps", b"downstream_apps", "embedding_config", b"embedding_config", "embedding_pipelines", b"embedding_pipelines", "id", b"id", "name", b"name", "owner_name", b"owner_name", "splitting_pipelines", b"splitting_pipelines", "summarizing_pipelines", b"summarizing_pipelines", "tags", b"tags", "total_files", b"total_files", "total_tokens", b"total_tokens", "uid", b"uid", "update_time", b"update_time", "used_storage", b"used_storage"]) -> None: ...

global___Catalog = Catalog

@typing_extensions.final
class CreateCatalogRequest(google.protobuf.message.Message):
    """CreateCatalogRequest represents a request to create a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_ID_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    CONVERTING_PIPELINES_FIELD_NUMBER: builtins.int
    SYSTEM_ID_FIELD_NUMBER: builtins.int
    namespace_id: builtins.str
    """The catalog's owner(namespaces)."""
    id: builtins.str
    """The catalog id (user-provided or auto-generated)."""
    description: builtins.str
    """The catalog description."""
    @property
    def tags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The catalog tags."""
    type: global___CatalogType.ValueType
    """The catalog type. default is PERSISTENT"""
    @property
    def converting_pipelines(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Pipelines used for converting page-based documents (i.e., files with pdf,
        doc[x] or ppt[x] extension) to Markdown. The strings in the list identify
        the pipelines and MUST have the format
        `{namespaceID}/{pipelineID}@{version}`. The pipeline recipes MUST have the
        following variable and output fields:
        ```yaml variable
        variable:
          document_input:
            title: document-input
            description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
            type: file
        ```
        The `convert_result` output should be a list of strings, one per page.
        ```yaml output
        output:
         convert_result:
           title: convert-result
           value: ${merge-markdown-refinement.output.results[0]}
        ```
        Other variable and output fields will be ignored.

        The pipelines will be executed in order until one produces a successful,
        non-empty result.

        If no pipelines are provided, a default pipeline will be used. For
        non-document catalog files, the conversion pipeline is deterministic (such
        files are typically trivial to convert and don't require a dedicated
        pipeline to improve the conversion performance).
        """
    system_id: builtins.str
    """System ID to use for this catalog.
    References a system configuration in the system table that defines how the knowledge base
    will be created based on the system's RAG configurations including:
    - AI model family (e.g., "openai", "gemini")
    - Embedding vector dimensionality (e.g., 1536 for OpenAI, 3072 for Gemini)
    - Chunking method
    - Other RAG-related settings

    Available systems: "openai", "gemini", or custom systems defined in the system table.
    If not specified, defaults to "openai" system.
    """
    def __init__(
        self,
        *,
        namespace_id: builtins.str = ...,
        id: builtins.str = ...,
        description: builtins.str = ...,
        tags: collections.abc.Iterable[builtins.str] | None = ...,
        type: global___CatalogType.ValueType = ...,
        converting_pipelines: collections.abc.Iterable[builtins.str] | None = ...,
        system_id: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_system_id", b"_system_id", "system_id", b"system_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_system_id", b"_system_id", "converting_pipelines", b"converting_pipelines", "description", b"description", "id", b"id", "namespace_id", b"namespace_id", "system_id", b"system_id", "tags", b"tags", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_system_id", b"_system_id"]) -> typing_extensions.Literal["system_id"] | None: ...

global___CreateCatalogRequest = CreateCatalogRequest

@typing_extensions.final
class CreateCatalogResponse(google.protobuf.message.Message):
    """CreateCatalogResponse represents a response for creating a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CATALOG_FIELD_NUMBER: builtins.int
    @property
    def catalog(self) -> global___Catalog:
        """The created catalog."""
    def __init__(
        self,
        *,
        catalog: global___Catalog | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> None: ...

global___CreateCatalogResponse = CreateCatalogResponse

@typing_extensions.final
class GetCatalogRequest(google.protobuf.message.Message):
    """GetCatalogRequest represents a request to get a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_ID_FIELD_NUMBER: builtins.int
    CATALOG_ID_FIELD_NUMBER: builtins.int
    namespace_id: builtins.str
    """Namespace ID."""
    catalog_id: builtins.str
    """Catalog ID."""
    def __init__(
        self,
        *,
        namespace_id: builtins.str = ...,
        catalog_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog_id", b"catalog_id", "namespace_id", b"namespace_id"]) -> None: ...

global___GetCatalogRequest = GetCatalogRequest

@typing_extensions.final
class GetCatalogResponse(google.protobuf.message.Message):
    """GetCatalogResponse represents a response for getting a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CATALOG_FIELD_NUMBER: builtins.int
    @property
    def catalog(self) -> global___Catalog:
        """The catalog resource."""
    def __init__(
        self,
        *,
        catalog: global___Catalog | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> None: ...

global___GetCatalogResponse = GetCatalogResponse

@typing_extensions.final
class ListCatalogsRequest(google.protobuf.message.Message):
    """Request message for ListCatalogs(not include the ephemeral catalogs)"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_ID_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    namespace_id: builtins.str
    """User ID for which to list the catalogs"""
    page_size: builtins.int
    """The maximum number of catalogs to return. If this parameter is unspecified,
    at most 10 catalogs will be returned. The cap value for this parameter
    is 100 (i.e. any value above that will be coerced to 100).
    """
    page_token: builtins.str
    """Page token."""
    filter: builtins.str
    """Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
    - `id="<catalog_id>"` or `uid="<uuid>"` - Filter by specific catalog ID/UID
    - `q="<text>"` - Fuzzy search on catalog ID and description

    **Examples**:
    - Filter by ID: `id="my-catalog"`
    - Search catalogs: `q="my-catalog"`
    """
    def __init__(
        self,
        *,
        namespace_id: builtins.str = ...,
        page_size: builtins.int | None = ...,
        page_token: builtins.str | None = ...,
        filter: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_filter", b"_filter", "_page_size", b"_page_size", "_page_token", b"_page_token", "filter", b"filter", "page_size", b"page_size", "page_token", b"page_token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_filter", b"_filter", "_page_size", b"_page_size", "_page_token", b"_page_token", "filter", b"filter", "namespace_id", b"namespace_id", "page_size", b"page_size", "page_token", b"page_token"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_filter", b"_filter"]) -> typing_extensions.Literal["filter"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_page_size", b"_page_size"]) -> typing_extensions.Literal["page_size"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_page_token", b"_page_token"]) -> typing_extensions.Literal["page_token"] | None: ...

global___ListCatalogsRequest = ListCatalogsRequest

@typing_extensions.final
class ListCatalogsResponse(google.protobuf.message.Message):
    """GetCatalogsResponse represents a response for getting all catalogs from users."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CATALOGS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    TOTAL_SIZE_FIELD_NUMBER: builtins.int
    @property
    def catalogs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Catalog]:
        """The catalogs container."""
    next_page_token: builtins.str
    """Next page token."""
    total_size: builtins.int
    """Total number of catalogs."""
    def __init__(
        self,
        *,
        catalogs: collections.abc.Iterable[global___Catalog] | None = ...,
        next_page_token: builtins.str = ...,
        total_size: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalogs", b"catalogs", "next_page_token", b"next_page_token", "total_size", b"total_size"]) -> None: ...

global___ListCatalogsResponse = ListCatalogsResponse

@typing_extensions.final
class UpdateCatalogRequest(google.protobuf.message.Message):
    """UpdateCatalogRequest represents a request to update a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_ID_FIELD_NUMBER: builtins.int
    CATALOG_ID_FIELD_NUMBER: builtins.int
    CATALOG_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    namespace_id: builtins.str
    """Namespace ID."""
    catalog_id: builtins.str
    """Catalog ID."""
    @property
    def catalog(self) -> global___Catalog:
        """The catalog fields that will replace the existing ones."""
    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """The update mask specifies the subset of fields that should be modified.

        For more information about this field, see
        https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
        """
    def __init__(
        self,
        *,
        namespace_id: builtins.str = ...,
        catalog_id: builtins.str = ...,
        catalog: global___Catalog | None = ...,
        update_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["catalog", b"catalog", "update_mask", b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog", b"catalog", "catalog_id", b"catalog_id", "namespace_id", b"namespace_id", "update_mask", b"update_mask"]) -> None: ...

global___UpdateCatalogRequest = UpdateCatalogRequest

@typing_extensions.final
class UpdateCatalogResponse(google.protobuf.message.Message):
    """UpdateCatalogResponse represents a response for updating a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CATALOG_FIELD_NUMBER: builtins.int
    @property
    def catalog(self) -> global___Catalog:
        """The updated catalog."""
    def __init__(
        self,
        *,
        catalog: global___Catalog | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> None: ...

global___UpdateCatalogResponse = UpdateCatalogResponse

@typing_extensions.final
class DeleteCatalogRequest(google.protobuf.message.Message):
    """DeleteCatalogRequest represents a request to delete a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACE_ID_FIELD_NUMBER: builtins.int
    CATALOG_ID_FIELD_NUMBER: builtins.int
    namespace_id: builtins.str
    """The owner's id. i.e. namespace."""
    catalog_id: builtins.str
    """The catalog id."""
    def __init__(
        self,
        *,
        namespace_id: builtins.str = ...,
        catalog_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog_id", b"catalog_id", "namespace_id", b"namespace_id"]) -> None: ...

global___DeleteCatalogRequest = DeleteCatalogRequest

@typing_extensions.final
class DeleteCatalogResponse(google.protobuf.message.Message):
    """DeleteCatalogResponse represents a response for deleting a catalog."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CATALOG_FIELD_NUMBER: builtins.int
    @property
    def catalog(self) -> global___Catalog:
        """The catalog identifier."""
    def __init__(
        self,
        *,
        catalog: global___Catalog | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["catalog", b"catalog"]) -> None: ...

global___DeleteCatalogResponse = DeleteCatalogResponse
