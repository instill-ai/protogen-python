"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import artifact.artifact.v1alpha.artifact_pb2
import artifact.artifact.v1alpha.file_catalog_pb2
import artifact.artifact.v1alpha.system_pb2
import artifact.artifact.v1alpha.update_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ArtifactPrivateServiceStub:
    """ArtifactPrivateService exposes the private endpoints that allow clients to
    manage artifacts.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListRepositoryTagsAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.ListRepositoryTagsAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.ListRepositoryTagsAdminResponse,
    ]
    """List the tags in a repository (admin only)

    Returns a portion of the versions that the specified repository holds.
    """
    GetRepositoryTagAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.GetRepositoryTagAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.GetRepositoryTagAdminResponse,
    ]
    """Get details of repository tag (admin only)"""
    CreateRepositoryTagAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.CreateRepositoryTagAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.CreateRepositoryTagAdminResponse,
    ]
    """Create a new repository tag (admin only)

    Adds a tag to a given repository. Note that this operation is only
    intended to register the information of an *already created* tag. This
    method should be called as part of the content push operation, right after
    the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
    succeeded. The distribution registry won't hold data such as the push time
    or the tag digest, so `artifact-backend` will hold this information locally.
    """
    DeleteRepositoryTagAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.DeleteRepositoryTagAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.DeleteRepositoryTagAdminResponse,
    ]
    """Delete a repository tag (admin only)"""
    GetObjectAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.GetObjectAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.GetObjectAdminResponse,
    ]
    """Get Object (admin only)"""
    GetObjectURLAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.GetObjectURLAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.GetObjectURLAdminResponse,
    ]
    """Get Object URL (admin only)"""
    UpdateObjectAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.UpdateObjectAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.UpdateObjectAdminResponse,
    ]
    """Update Object (admin only)"""
    GetFileAsMarkdownAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_catalog_pb2.GetFileAsMarkdownAdminRequest,
        artifact.artifact.v1alpha.file_catalog_pb2.GetFileAsMarkdownAdminResponse,
    ]
    """Get file as Markdown (admin only)

    Returns the Markdown representation of a file.
    """
    GetChatFileAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_catalog_pb2.GetChatFileAdminRequest,
        artifact.artifact.v1alpha.file_catalog_pb2.GetChatFileAdminResponse,
    ]
    """Get file as Markdown (deprecated, admin only)

    Returns the contents of a file conversion to Markdown as a binary blob.
    This method is deprecated as it identifies the file by namespace and
    filename instead of UID, which isn't a unique identifier anymore.
    """
    DeleteCatalogFileAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.DeleteCatalogFileAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.DeleteCatalogFileAdminResponse,
    ]
    """Delete a catalog file (admin only)

    Deletes a file from a catalog using only the file UID. Unlike the public
    DeleteCatalogFile endpoint which requires namespace and catalog IDs, this
    admin endpoint automatically looks up the file's catalog and owner to
    perform the deletion. Primarily used for integration testing and internal
    operations where the caller has a file UID but not the full resource path.
    Authentication metadata is injected automatically based on the file owner.
    """
    ExecuteKnowledgeBaseUpdateAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.ExecuteKnowledgeBaseUpdateAdminRequest,
        artifact.artifact.v1alpha.update_pb2.ExecuteKnowledgeBaseUpdateAdminResponse,
    ]
    """Knowledge Base Update Admin APIs

    Execute knowledge base update (admin only)
    """
    AbortKnowledgeBaseUpdateAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.AbortKnowledgeBaseUpdateAdminRequest,
        artifact.artifact.v1alpha.update_pb2.AbortKnowledgeBaseUpdateAdminResponse,
    ]
    """Abort knowledge base update (admin only)

    Cancels ongoing update workflows and cleans up staging KB resources
    (both finished and unfinished). Can abort specific catalogs by ID or
    all currently updating catalogs if no IDs provided. Sets catalog status
    to 'aborted'.
    """
    RollbackAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.RollbackAdminRequest,
        artifact.artifact.v1alpha.update_pb2.RollbackAdminResponse,
    ]
    """Rollback a specific catalog to previous version (admin only)"""
    PurgeRollbackAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.PurgeRollbackAdminRequest,
        artifact.artifact.v1alpha.update_pb2.PurgeRollbackAdminResponse,
    ]
    """Purge rollback immediately (admin only)"""
    SetRollbackRetentionAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.SetRollbackRetentionAdminRequest,
        artifact.artifact.v1alpha.update_pb2.SetRollbackRetentionAdminResponse,
    ]
    """Set rollback retention period (admin only)"""
    GetKnowledgeBaseUpdateStatusAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.GetKnowledgeBaseUpdateStatusAdminRequest,
        artifact.artifact.v1alpha.update_pb2.GetKnowledgeBaseUpdateStatusAdminResponse,
    ]
    """Get knowledge base update status (admin only)"""
    CreateSystemAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.CreateSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.CreateSystemAdminResponse,
    ]
    """System Management Admin APIs

    Create a new system configuration (admin only)
    """
    GetSystemAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.GetSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.GetSystemAdminResponse,
    ]
    """Get a system configuration (admin only)"""
    UpdateSystemAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.UpdateSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.UpdateSystemAdminResponse,
    ]
    """Update an existing system configuration (admin only)"""
    DeleteSystemAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.DeleteSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.DeleteSystemAdminResponse,
    ]
    """Delete a system configuration (admin only)"""
    ListSystemsAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.ListSystemsAdminRequest,
        artifact.artifact.v1alpha.system_pb2.ListSystemsAdminResponse,
    ]
    """List all system configurations (admin only)"""
    RenameSystemAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.RenameSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.RenameSystemAdminResponse,
    ]
    """Rename a system configuration (admin only)"""
    SetDefaultSystemAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.SetDefaultSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.SetDefaultSystemAdminResponse,
    ]
    """Set the default system configuration (admin only)"""
    GetDefaultSystemAdmin: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.GetDefaultSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.GetDefaultSystemAdminResponse,
    ]
    """Get the current default system configuration (admin only)"""

class ArtifactPrivateServiceAsyncStub:
    """ArtifactPrivateService exposes the private endpoints that allow clients to
    manage artifacts.
    """

    ListRepositoryTagsAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.ListRepositoryTagsAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.ListRepositoryTagsAdminResponse,
    ]
    """List the tags in a repository (admin only)

    Returns a portion of the versions that the specified repository holds.
    """
    GetRepositoryTagAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.GetRepositoryTagAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.GetRepositoryTagAdminResponse,
    ]
    """Get details of repository tag (admin only)"""
    CreateRepositoryTagAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.CreateRepositoryTagAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.CreateRepositoryTagAdminResponse,
    ]
    """Create a new repository tag (admin only)

    Adds a tag to a given repository. Note that this operation is only
    intended to register the information of an *already created* tag. This
    method should be called as part of the content push operation, right after
    the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
    succeeded. The distribution registry won't hold data such as the push time
    or the tag digest, so `artifact-backend` will hold this information locally.
    """
    DeleteRepositoryTagAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.DeleteRepositoryTagAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.DeleteRepositoryTagAdminResponse,
    ]
    """Delete a repository tag (admin only)"""
    GetObjectAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.GetObjectAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.GetObjectAdminResponse,
    ]
    """Get Object (admin only)"""
    GetObjectURLAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.GetObjectURLAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.GetObjectURLAdminResponse,
    ]
    """Get Object URL (admin only)"""
    UpdateObjectAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.UpdateObjectAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.UpdateObjectAdminResponse,
    ]
    """Update Object (admin only)"""
    GetFileAsMarkdownAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_catalog_pb2.GetFileAsMarkdownAdminRequest,
        artifact.artifact.v1alpha.file_catalog_pb2.GetFileAsMarkdownAdminResponse,
    ]
    """Get file as Markdown (admin only)

    Returns the Markdown representation of a file.
    """
    GetChatFileAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_catalog_pb2.GetChatFileAdminRequest,
        artifact.artifact.v1alpha.file_catalog_pb2.GetChatFileAdminResponse,
    ]
    """Get file as Markdown (deprecated, admin only)

    Returns the contents of a file conversion to Markdown as a binary blob.
    This method is deprecated as it identifies the file by namespace and
    filename instead of UID, which isn't a unique identifier anymore.
    """
    DeleteCatalogFileAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.DeleteCatalogFileAdminRequest,
        artifact.artifact.v1alpha.artifact_pb2.DeleteCatalogFileAdminResponse,
    ]
    """Delete a catalog file (admin only)

    Deletes a file from a catalog using only the file UID. Unlike the public
    DeleteCatalogFile endpoint which requires namespace and catalog IDs, this
    admin endpoint automatically looks up the file's catalog and owner to
    perform the deletion. Primarily used for integration testing and internal
    operations where the caller has a file UID but not the full resource path.
    Authentication metadata is injected automatically based on the file owner.
    """
    ExecuteKnowledgeBaseUpdateAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.ExecuteKnowledgeBaseUpdateAdminRequest,
        artifact.artifact.v1alpha.update_pb2.ExecuteKnowledgeBaseUpdateAdminResponse,
    ]
    """Knowledge Base Update Admin APIs

    Execute knowledge base update (admin only)
    """
    AbortKnowledgeBaseUpdateAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.AbortKnowledgeBaseUpdateAdminRequest,
        artifact.artifact.v1alpha.update_pb2.AbortKnowledgeBaseUpdateAdminResponse,
    ]
    """Abort knowledge base update (admin only)

    Cancels ongoing update workflows and cleans up staging KB resources
    (both finished and unfinished). Can abort specific catalogs by ID or
    all currently updating catalogs if no IDs provided. Sets catalog status
    to 'aborted'.
    """
    RollbackAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.RollbackAdminRequest,
        artifact.artifact.v1alpha.update_pb2.RollbackAdminResponse,
    ]
    """Rollback a specific catalog to previous version (admin only)"""
    PurgeRollbackAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.PurgeRollbackAdminRequest,
        artifact.artifact.v1alpha.update_pb2.PurgeRollbackAdminResponse,
    ]
    """Purge rollback immediately (admin only)"""
    SetRollbackRetentionAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.SetRollbackRetentionAdminRequest,
        artifact.artifact.v1alpha.update_pb2.SetRollbackRetentionAdminResponse,
    ]
    """Set rollback retention period (admin only)"""
    GetKnowledgeBaseUpdateStatusAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.update_pb2.GetKnowledgeBaseUpdateStatusAdminRequest,
        artifact.artifact.v1alpha.update_pb2.GetKnowledgeBaseUpdateStatusAdminResponse,
    ]
    """Get knowledge base update status (admin only)"""
    CreateSystemAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.CreateSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.CreateSystemAdminResponse,
    ]
    """System Management Admin APIs

    Create a new system configuration (admin only)
    """
    GetSystemAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.GetSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.GetSystemAdminResponse,
    ]
    """Get a system configuration (admin only)"""
    UpdateSystemAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.UpdateSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.UpdateSystemAdminResponse,
    ]
    """Update an existing system configuration (admin only)"""
    DeleteSystemAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.DeleteSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.DeleteSystemAdminResponse,
    ]
    """Delete a system configuration (admin only)"""
    ListSystemsAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.ListSystemsAdminRequest,
        artifact.artifact.v1alpha.system_pb2.ListSystemsAdminResponse,
    ]
    """List all system configurations (admin only)"""
    RenameSystemAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.RenameSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.RenameSystemAdminResponse,
    ]
    """Rename a system configuration (admin only)"""
    SetDefaultSystemAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.SetDefaultSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.SetDefaultSystemAdminResponse,
    ]
    """Set the default system configuration (admin only)"""
    GetDefaultSystemAdmin: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.system_pb2.GetDefaultSystemAdminRequest,
        artifact.artifact.v1alpha.system_pb2.GetDefaultSystemAdminResponse,
    ]
    """Get the current default system configuration (admin only)"""

class ArtifactPrivateServiceServicer(metaclass=abc.ABCMeta):
    """ArtifactPrivateService exposes the private endpoints that allow clients to
    manage artifacts.
    """

    @abc.abstractmethod
    def ListRepositoryTagsAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.ListRepositoryTagsAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.ListRepositoryTagsAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.ListRepositoryTagsAdminResponse]]:
        """List the tags in a repository (admin only)

        Returns a portion of the versions that the specified repository holds.
        """
    @abc.abstractmethod
    def GetRepositoryTagAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.GetRepositoryTagAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.GetRepositoryTagAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.GetRepositoryTagAdminResponse]]:
        """Get details of repository tag (admin only)"""
    @abc.abstractmethod
    def CreateRepositoryTagAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.CreateRepositoryTagAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.CreateRepositoryTagAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.CreateRepositoryTagAdminResponse]]:
        """Create a new repository tag (admin only)

        Adds a tag to a given repository. Note that this operation is only
        intended to register the information of an *already created* tag. This
        method should be called as part of the content push operation, right after
        the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
        succeeded. The distribution registry won't hold data such as the push time
        or the tag digest, so `artifact-backend` will hold this information locally.
        """
    @abc.abstractmethod
    def DeleteRepositoryTagAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.DeleteRepositoryTagAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.DeleteRepositoryTagAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.DeleteRepositoryTagAdminResponse]]:
        """Delete a repository tag (admin only)"""
    @abc.abstractmethod
    def GetObjectAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.GetObjectAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.GetObjectAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.GetObjectAdminResponse]]:
        """Get Object (admin only)"""
    @abc.abstractmethod
    def GetObjectURLAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.GetObjectURLAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.GetObjectURLAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.GetObjectURLAdminResponse]]:
        """Get Object URL (admin only)"""
    @abc.abstractmethod
    def UpdateObjectAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.UpdateObjectAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.UpdateObjectAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.UpdateObjectAdminResponse]]:
        """Update Object (admin only)"""
    @abc.abstractmethod
    def GetFileAsMarkdownAdmin(
        self,
        request: artifact.artifact.v1alpha.file_catalog_pb2.GetFileAsMarkdownAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.file_catalog_pb2.GetFileAsMarkdownAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.file_catalog_pb2.GetFileAsMarkdownAdminResponse]]:
        """Get file as Markdown (admin only)

        Returns the Markdown representation of a file.
        """
    @abc.abstractmethod
    def GetChatFileAdmin(
        self,
        request: artifact.artifact.v1alpha.file_catalog_pb2.GetChatFileAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.file_catalog_pb2.GetChatFileAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.file_catalog_pb2.GetChatFileAdminResponse]]:
        """Get file as Markdown (deprecated, admin only)

        Returns the contents of a file conversion to Markdown as a binary blob.
        This method is deprecated as it identifies the file by namespace and
        filename instead of UID, which isn't a unique identifier anymore.
        """
    @abc.abstractmethod
    def DeleteCatalogFileAdmin(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.DeleteCatalogFileAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.DeleteCatalogFileAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.DeleteCatalogFileAdminResponse]]:
        """Delete a catalog file (admin only)

        Deletes a file from a catalog using only the file UID. Unlike the public
        DeleteCatalogFile endpoint which requires namespace and catalog IDs, this
        admin endpoint automatically looks up the file's catalog and owner to
        perform the deletion. Primarily used for integration testing and internal
        operations where the caller has a file UID but not the full resource path.
        Authentication metadata is injected automatically based on the file owner.
        """
    @abc.abstractmethod
    def ExecuteKnowledgeBaseUpdateAdmin(
        self,
        request: artifact.artifact.v1alpha.update_pb2.ExecuteKnowledgeBaseUpdateAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.update_pb2.ExecuteKnowledgeBaseUpdateAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.update_pb2.ExecuteKnowledgeBaseUpdateAdminResponse]]:
        """Knowledge Base Update Admin APIs

        Execute knowledge base update (admin only)
        """
    @abc.abstractmethod
    def AbortKnowledgeBaseUpdateAdmin(
        self,
        request: artifact.artifact.v1alpha.update_pb2.AbortKnowledgeBaseUpdateAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.update_pb2.AbortKnowledgeBaseUpdateAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.update_pb2.AbortKnowledgeBaseUpdateAdminResponse]]:
        """Abort knowledge base update (admin only)

        Cancels ongoing update workflows and cleans up staging KB resources
        (both finished and unfinished). Can abort specific catalogs by ID or
        all currently updating catalogs if no IDs provided. Sets catalog status
        to 'aborted'.
        """
    @abc.abstractmethod
    def RollbackAdmin(
        self,
        request: artifact.artifact.v1alpha.update_pb2.RollbackAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.update_pb2.RollbackAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.update_pb2.RollbackAdminResponse]]:
        """Rollback a specific catalog to previous version (admin only)"""
    @abc.abstractmethod
    def PurgeRollbackAdmin(
        self,
        request: artifact.artifact.v1alpha.update_pb2.PurgeRollbackAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.update_pb2.PurgeRollbackAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.update_pb2.PurgeRollbackAdminResponse]]:
        """Purge rollback immediately (admin only)"""
    @abc.abstractmethod
    def SetRollbackRetentionAdmin(
        self,
        request: artifact.artifact.v1alpha.update_pb2.SetRollbackRetentionAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.update_pb2.SetRollbackRetentionAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.update_pb2.SetRollbackRetentionAdminResponse]]:
        """Set rollback retention period (admin only)"""
    @abc.abstractmethod
    def GetKnowledgeBaseUpdateStatusAdmin(
        self,
        request: artifact.artifact.v1alpha.update_pb2.GetKnowledgeBaseUpdateStatusAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.update_pb2.GetKnowledgeBaseUpdateStatusAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.update_pb2.GetKnowledgeBaseUpdateStatusAdminResponse]]:
        """Get knowledge base update status (admin only)"""
    @abc.abstractmethod
    def CreateSystemAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.CreateSystemAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.CreateSystemAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.CreateSystemAdminResponse]]:
        """System Management Admin APIs

        Create a new system configuration (admin only)
        """
    @abc.abstractmethod
    def GetSystemAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.GetSystemAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.GetSystemAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.GetSystemAdminResponse]]:
        """Get a system configuration (admin only)"""
    @abc.abstractmethod
    def UpdateSystemAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.UpdateSystemAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.UpdateSystemAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.UpdateSystemAdminResponse]]:
        """Update an existing system configuration (admin only)"""
    @abc.abstractmethod
    def DeleteSystemAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.DeleteSystemAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.DeleteSystemAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.DeleteSystemAdminResponse]]:
        """Delete a system configuration (admin only)"""
    @abc.abstractmethod
    def ListSystemsAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.ListSystemsAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.ListSystemsAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.ListSystemsAdminResponse]]:
        """List all system configurations (admin only)"""
    @abc.abstractmethod
    def RenameSystemAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.RenameSystemAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.RenameSystemAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.RenameSystemAdminResponse]]:
        """Rename a system configuration (admin only)"""
    @abc.abstractmethod
    def SetDefaultSystemAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.SetDefaultSystemAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.SetDefaultSystemAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.SetDefaultSystemAdminResponse]]:
        """Set the default system configuration (admin only)"""
    @abc.abstractmethod
    def GetDefaultSystemAdmin(
        self,
        request: artifact.artifact.v1alpha.system_pb2.GetDefaultSystemAdminRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.system_pb2.GetDefaultSystemAdminResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.system_pb2.GetDefaultSystemAdminResponse]]:
        """Get the current default system configuration (admin only)"""

def add_ArtifactPrivateServiceServicer_to_server(servicer: ArtifactPrivateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
