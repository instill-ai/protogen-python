"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import artifact.artifact.v1alpha.artifact_pb2
import artifact.artifact.v1alpha.chunk_pb2
import artifact.artifact.v1alpha.file_pb2
import artifact.artifact.v1alpha.knowledge_base_pb2
import artifact.artifact.v1alpha.object_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ArtifactPublicServiceStub:
    """ArtifactPublicService exposes the public endpoints that allow clients to
    manage artifacts.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Liveness: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.LivenessRequest,
        artifact.artifact.v1alpha.artifact_pb2.LivenessResponse,
    ]
    """Check if the artifact server is alive

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
    """
    Readiness: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.ReadinessRequest,
        artifact.artifact.v1alpha.artifact_pb2.ReadinessResponse,
    ]
    """Check if the artifact server is ready

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    CreateKnowledgeBase: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.CreateKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.CreateKnowledgeBaseResponse,
    ]
    """Create a knowledge base

    Creates a knowledge base.
    """
    GetKnowledgeBase: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.GetKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.GetKnowledgeBaseResponse,
    ]
    """Get a knowledge base

    Returns the details of a knowledge base.
    """
    ListKnowledgeBases: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.ListKnowledgeBasesRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.ListKnowledgeBasesResponse,
    ]
    """Get all knowledge bases info

    Returns a paginated list of knowledge bases.
    """
    UpdateKnowledgeBase: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.UpdateKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.UpdateKnowledgeBaseResponse,
    ]
    """Update a knowledge base info

    Updates the information of a knowledge base.
    """
    DeleteKnowledgeBase: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.DeleteKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.DeleteKnowledgeBaseResponse,
    ]
    """Delete a knowledge base

    Deletes a knowledge base.
    """
    CreateFile: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.CreateFileRequest,
        artifact.artifact.v1alpha.file_pb2.CreateFileResponse,
    ]
    """Create a file

    Uploads and converts a file to a knowledge base.
    """
    GetFile: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.GetFileRequest,
        artifact.artifact.v1alpha.file_pb2.GetFileResponse,
    ]
    """Get a file

    Returns the details of a file.
    """
    ListFiles: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.ListFilesRequest,
        artifact.artifact.v1alpha.file_pb2.ListFilesResponse,
    ]
    """List files

    Returns a paginated list of files.
    """
    UpdateFile: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.UpdateFileRequest,
        artifact.artifact.v1alpha.file_pb2.UpdateFileResponse,
    ]
    """Update a file

    Updates a file.
    """
    DeleteFile: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.DeleteFileRequest,
        artifact.artifact.v1alpha.file_pb2.DeleteFileResponse,
    ]
    """Delete a file

    Deletes a file.
    """
    GetChunk: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.GetChunkRequest,
        artifact.artifact.v1alpha.chunk_pb2.GetChunkResponse,
    ]
    """Get a chunk

    Returns the details of a chunk.
    """
    ListChunks: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.ListChunksRequest,
        artifact.artifact.v1alpha.chunk_pb2.ListChunksResponse,
    ]
    """List chunks

    Returns a paginated list of chunks.
    """
    UpdateChunk: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.UpdateChunkRequest,
        artifact.artifact.v1alpha.chunk_pb2.UpdateChunkResponse,
    ]
    """Update a chunk

    Updates a chunk.
    """
    SearchChunks: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.SearchChunksRequest,
        artifact.artifact.v1alpha.chunk_pb2.SearchChunksResponse,
    ]
    """Search chunks

    Returns the top-K most similar chunks to a text prompt.
    """
    ListKnowledgeBaseRuns: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.ListKnowledgeBaseRunsRequest,
        artifact.artifact.v1alpha.artifact_pb2.ListKnowledgeBaseRunsResponse,
    ]
    """List Knowledge Base Runs

    Returns a paginated list of knowledge base runs.
    """
    GetObjectUploadURL: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.object_pb2.GetObjectUploadURLRequest,
        artifact.artifact.v1alpha.object_pb2.GetObjectUploadURLResponse,
    ]
    """Get Object Upload URL

    Returns the upload URL of an object.
    """
    GetObjectDownloadURL: grpc.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.object_pb2.GetObjectDownloadURLRequest,
        artifact.artifact.v1alpha.object_pb2.GetObjectDownloadURLResponse,
    ]
    """Get Object Download URL

    Returns the download URL of an object.
    """

class ArtifactPublicServiceAsyncStub:
    """ArtifactPublicService exposes the public endpoints that allow clients to
    manage artifacts.
    """

    Liveness: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.LivenessRequest,
        artifact.artifact.v1alpha.artifact_pb2.LivenessResponse,
    ]
    """Check if the artifact server is alive

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
    """
    Readiness: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.ReadinessRequest,
        artifact.artifact.v1alpha.artifact_pb2.ReadinessResponse,
    ]
    """Check if the artifact server is ready

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    CreateKnowledgeBase: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.CreateKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.CreateKnowledgeBaseResponse,
    ]
    """Create a knowledge base

    Creates a knowledge base.
    """
    GetKnowledgeBase: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.GetKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.GetKnowledgeBaseResponse,
    ]
    """Get a knowledge base

    Returns the details of a knowledge base.
    """
    ListKnowledgeBases: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.ListKnowledgeBasesRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.ListKnowledgeBasesResponse,
    ]
    """Get all knowledge bases info

    Returns a paginated list of knowledge bases.
    """
    UpdateKnowledgeBase: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.UpdateKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.UpdateKnowledgeBaseResponse,
    ]
    """Update a knowledge base info

    Updates the information of a knowledge base.
    """
    DeleteKnowledgeBase: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.knowledge_base_pb2.DeleteKnowledgeBaseRequest,
        artifact.artifact.v1alpha.knowledge_base_pb2.DeleteKnowledgeBaseResponse,
    ]
    """Delete a knowledge base

    Deletes a knowledge base.
    """
    CreateFile: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.CreateFileRequest,
        artifact.artifact.v1alpha.file_pb2.CreateFileResponse,
    ]
    """Create a file

    Uploads and converts a file to a knowledge base.
    """
    GetFile: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.GetFileRequest,
        artifact.artifact.v1alpha.file_pb2.GetFileResponse,
    ]
    """Get a file

    Returns the details of a file.
    """
    ListFiles: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.ListFilesRequest,
        artifact.artifact.v1alpha.file_pb2.ListFilesResponse,
    ]
    """List files

    Returns a paginated list of files.
    """
    UpdateFile: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.UpdateFileRequest,
        artifact.artifact.v1alpha.file_pb2.UpdateFileResponse,
    ]
    """Update a file

    Updates a file.
    """
    DeleteFile: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.file_pb2.DeleteFileRequest,
        artifact.artifact.v1alpha.file_pb2.DeleteFileResponse,
    ]
    """Delete a file

    Deletes a file.
    """
    GetChunk: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.GetChunkRequest,
        artifact.artifact.v1alpha.chunk_pb2.GetChunkResponse,
    ]
    """Get a chunk

    Returns the details of a chunk.
    """
    ListChunks: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.ListChunksRequest,
        artifact.artifact.v1alpha.chunk_pb2.ListChunksResponse,
    ]
    """List chunks

    Returns a paginated list of chunks.
    """
    UpdateChunk: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.UpdateChunkRequest,
        artifact.artifact.v1alpha.chunk_pb2.UpdateChunkResponse,
    ]
    """Update a chunk

    Updates a chunk.
    """
    SearchChunks: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.chunk_pb2.SearchChunksRequest,
        artifact.artifact.v1alpha.chunk_pb2.SearchChunksResponse,
    ]
    """Search chunks

    Returns the top-K most similar chunks to a text prompt.
    """
    ListKnowledgeBaseRuns: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.artifact_pb2.ListKnowledgeBaseRunsRequest,
        artifact.artifact.v1alpha.artifact_pb2.ListKnowledgeBaseRunsResponse,
    ]
    """List Knowledge Base Runs

    Returns a paginated list of knowledge base runs.
    """
    GetObjectUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.object_pb2.GetObjectUploadURLRequest,
        artifact.artifact.v1alpha.object_pb2.GetObjectUploadURLResponse,
    ]
    """Get Object Upload URL

    Returns the upload URL of an object.
    """
    GetObjectDownloadURL: grpc.aio.UnaryUnaryMultiCallable[
        artifact.artifact.v1alpha.object_pb2.GetObjectDownloadURLRequest,
        artifact.artifact.v1alpha.object_pb2.GetObjectDownloadURLResponse,
    ]
    """Get Object Download URL

    Returns the download URL of an object.
    """

class ArtifactPublicServiceServicer(metaclass=abc.ABCMeta):
    """ArtifactPublicService exposes the public endpoints that allow clients to
    manage artifacts.
    """

    @abc.abstractmethod
    def Liveness(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.LivenessRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.LivenessResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.LivenessResponse]]:
        """Check if the artifact server is alive

        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        """
    @abc.abstractmethod
    def Readiness(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.ReadinessRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.ReadinessResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.ReadinessResponse]]:
        """Check if the artifact server is ready

        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
        """
    @abc.abstractmethod
    def CreateKnowledgeBase(
        self,
        request: artifact.artifact.v1alpha.knowledge_base_pb2.CreateKnowledgeBaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.knowledge_base_pb2.CreateKnowledgeBaseResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.knowledge_base_pb2.CreateKnowledgeBaseResponse]]:
        """Create a knowledge base

        Creates a knowledge base.
        """
    @abc.abstractmethod
    def GetKnowledgeBase(
        self,
        request: artifact.artifact.v1alpha.knowledge_base_pb2.GetKnowledgeBaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.knowledge_base_pb2.GetKnowledgeBaseResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.knowledge_base_pb2.GetKnowledgeBaseResponse]]:
        """Get a knowledge base

        Returns the details of a knowledge base.
        """
    @abc.abstractmethod
    def ListKnowledgeBases(
        self,
        request: artifact.artifact.v1alpha.knowledge_base_pb2.ListKnowledgeBasesRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.knowledge_base_pb2.ListKnowledgeBasesResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.knowledge_base_pb2.ListKnowledgeBasesResponse]]:
        """Get all knowledge bases info

        Returns a paginated list of knowledge bases.
        """
    @abc.abstractmethod
    def UpdateKnowledgeBase(
        self,
        request: artifact.artifact.v1alpha.knowledge_base_pb2.UpdateKnowledgeBaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.knowledge_base_pb2.UpdateKnowledgeBaseResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.knowledge_base_pb2.UpdateKnowledgeBaseResponse]]:
        """Update a knowledge base info

        Updates the information of a knowledge base.
        """
    @abc.abstractmethod
    def DeleteKnowledgeBase(
        self,
        request: artifact.artifact.v1alpha.knowledge_base_pb2.DeleteKnowledgeBaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.knowledge_base_pb2.DeleteKnowledgeBaseResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.knowledge_base_pb2.DeleteKnowledgeBaseResponse]]:
        """Delete a knowledge base

        Deletes a knowledge base.
        """
    @abc.abstractmethod
    def CreateFile(
        self,
        request: artifact.artifact.v1alpha.file_pb2.CreateFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.file_pb2.CreateFileResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.file_pb2.CreateFileResponse]]:
        """Create a file

        Uploads and converts a file to a knowledge base.
        """
    @abc.abstractmethod
    def GetFile(
        self,
        request: artifact.artifact.v1alpha.file_pb2.GetFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.file_pb2.GetFileResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.file_pb2.GetFileResponse]]:
        """Get a file

        Returns the details of a file.
        """
    @abc.abstractmethod
    def ListFiles(
        self,
        request: artifact.artifact.v1alpha.file_pb2.ListFilesRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.file_pb2.ListFilesResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.file_pb2.ListFilesResponse]]:
        """List files

        Returns a paginated list of files.
        """
    @abc.abstractmethod
    def UpdateFile(
        self,
        request: artifact.artifact.v1alpha.file_pb2.UpdateFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.file_pb2.UpdateFileResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.file_pb2.UpdateFileResponse]]:
        """Update a file

        Updates a file.
        """
    @abc.abstractmethod
    def DeleteFile(
        self,
        request: artifact.artifact.v1alpha.file_pb2.DeleteFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.file_pb2.DeleteFileResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.file_pb2.DeleteFileResponse]]:
        """Delete a file

        Deletes a file.
        """
    @abc.abstractmethod
    def GetChunk(
        self,
        request: artifact.artifact.v1alpha.chunk_pb2.GetChunkRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.chunk_pb2.GetChunkResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.chunk_pb2.GetChunkResponse]]:
        """Get a chunk

        Returns the details of a chunk.
        """
    @abc.abstractmethod
    def ListChunks(
        self,
        request: artifact.artifact.v1alpha.chunk_pb2.ListChunksRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.chunk_pb2.ListChunksResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.chunk_pb2.ListChunksResponse]]:
        """List chunks

        Returns a paginated list of chunks.
        """
    @abc.abstractmethod
    def UpdateChunk(
        self,
        request: artifact.artifact.v1alpha.chunk_pb2.UpdateChunkRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.chunk_pb2.UpdateChunkResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.chunk_pb2.UpdateChunkResponse]]:
        """Update a chunk

        Updates a chunk.
        """
    @abc.abstractmethod
    def SearchChunks(
        self,
        request: artifact.artifact.v1alpha.chunk_pb2.SearchChunksRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.chunk_pb2.SearchChunksResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.chunk_pb2.SearchChunksResponse]]:
        """Search chunks

        Returns the top-K most similar chunks to a text prompt.
        """
    @abc.abstractmethod
    def ListKnowledgeBaseRuns(
        self,
        request: artifact.artifact.v1alpha.artifact_pb2.ListKnowledgeBaseRunsRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.artifact_pb2.ListKnowledgeBaseRunsResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.artifact_pb2.ListKnowledgeBaseRunsResponse]]:
        """List Knowledge Base Runs

        Returns a paginated list of knowledge base runs.
        """
    @abc.abstractmethod
    def GetObjectUploadURL(
        self,
        request: artifact.artifact.v1alpha.object_pb2.GetObjectUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.object_pb2.GetObjectUploadURLResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.object_pb2.GetObjectUploadURLResponse]]:
        """Get Object Upload URL

        Returns the upload URL of an object.
        """
    @abc.abstractmethod
    def GetObjectDownloadURL(
        self,
        request: artifact.artifact.v1alpha.object_pb2.GetObjectDownloadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[artifact.artifact.v1alpha.object_pb2.GetObjectDownloadURLResponse, collections.abc.Awaitable[artifact.artifact.v1alpha.object_pb2.GetObjectDownloadURLResponse]]:
        """Get Object Download URL

        Returns the download URL of an object.
        """

def add_ArtifactPublicServiceServicer_to_server(servicer: ArtifactPublicServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
