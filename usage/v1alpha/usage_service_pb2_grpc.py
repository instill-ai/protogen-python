# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from usage.v1alpha import healthcheck_pb2 as usage_dot_v1alpha_dot_healthcheck__pb2
from usage.v1alpha import usage_pb2 as usage_dot_v1alpha_dot_usage__pb2


class UsageServiceStub(object):
    """UsageService responds to incoming usage requests.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Liveness = channel.unary_unary(
                '/usage.v1alpha.UsageService/Liveness',
                request_serializer=usage_dot_v1alpha_dot_healthcheck__pb2.LivenessRequest.SerializeToString,
                response_deserializer=usage_dot_v1alpha_dot_healthcheck__pb2.LivenessResponse.FromString,
                )
        self.Readiness = channel.unary_unary(
                '/usage.v1alpha.UsageService/Readiness',
                request_serializer=usage_dot_v1alpha_dot_healthcheck__pb2.ReadinessRequest.SerializeToString,
                response_deserializer=usage_dot_v1alpha_dot_healthcheck__pb2.ReadinessResponse.FromString,
                )
        self.CreateSession = channel.unary_unary(
                '/usage.v1alpha.UsageService/CreateSession',
                request_serializer=usage_dot_v1alpha_dot_usage__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=usage_dot_v1alpha_dot_usage__pb2.CreateSessionResponse.FromString,
                )
        self.SendReport = channel.unary_unary(
                '/usage.v1alpha.UsageService/SendReport',
                request_serializer=usage_dot_v1alpha_dot_usage__pb2.SendReportRequest.SerializeToString,
                response_deserializer=usage_dot_v1alpha_dot_usage__pb2.SendReportResponse.FromString,
                )


class UsageServiceServicer(object):
    """UsageService responds to incoming usage requests.
    """

    def Liveness(self, request, context):
        """Liveness method receives a LivenessRequest message and returns a
        LivenessResponse message.
        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Readiness(self, request, context):
        """Readiness method receives a ReadinessRequest message and returns a
        ReadinessResponse message.
        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """CreateSession method receives a CreateSessionRequest message and returns
        a CreateSessionResponse message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendReport(self, request, context):
        """SendReport method receives a SendReportRequest message and returns a
        SendReportResponse message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Liveness': grpc.unary_unary_rpc_method_handler(
                    servicer.Liveness,
                    request_deserializer=usage_dot_v1alpha_dot_healthcheck__pb2.LivenessRequest.FromString,
                    response_serializer=usage_dot_v1alpha_dot_healthcheck__pb2.LivenessResponse.SerializeToString,
            ),
            'Readiness': grpc.unary_unary_rpc_method_handler(
                    servicer.Readiness,
                    request_deserializer=usage_dot_v1alpha_dot_healthcheck__pb2.ReadinessRequest.FromString,
                    response_serializer=usage_dot_v1alpha_dot_healthcheck__pb2.ReadinessResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=usage_dot_v1alpha_dot_usage__pb2.CreateSessionRequest.FromString,
                    response_serializer=usage_dot_v1alpha_dot_usage__pb2.CreateSessionResponse.SerializeToString,
            ),
            'SendReport': grpc.unary_unary_rpc_method_handler(
                    servicer.SendReport,
                    request_deserializer=usage_dot_v1alpha_dot_usage__pb2.SendReportRequest.FromString,
                    response_serializer=usage_dot_v1alpha_dot_usage__pb2.SendReportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'usage.v1alpha.UsageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UsageService(object):
    """UsageService responds to incoming usage requests.
    """

    @staticmethod
    def Liveness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usage.v1alpha.UsageService/Liveness',
            usage_dot_v1alpha_dot_healthcheck__pb2.LivenessRequest.SerializeToString,
            usage_dot_v1alpha_dot_healthcheck__pb2.LivenessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Readiness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usage.v1alpha.UsageService/Readiness',
            usage_dot_v1alpha_dot_healthcheck__pb2.ReadinessRequest.SerializeToString,
            usage_dot_v1alpha_dot_healthcheck__pb2.ReadinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usage.v1alpha.UsageService/CreateSession',
            usage_dot_v1alpha_dot_usage__pb2.CreateSessionRequest.SerializeToString,
            usage_dot_v1alpha_dot_usage__pb2.CreateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/usage.v1alpha.UsageService/SendReport',
            usage_dot_v1alpha_dot_usage__pb2.SendReportRequest.SerializeToString,
            usage_dot_v1alpha_dot_usage__pb2.SendReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
