"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import app.app.v1alpha.app_pb2
import app.app.v1alpha.chat_pb2
import app.app.v1alpha.table_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class AppPublicServiceStub:
    """AppPublicService exposes the public endpoints that allow clients to
    manage apps.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Liveness: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.app_pb2.LivenessRequest,
        app.app.v1alpha.app_pb2.LivenessResponse,
    ]
    """Check if the app server is alive

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
    """
    Readiness: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.app_pb2.ReadinessRequest,
        app.app.v1alpha.app_pb2.ReadinessResponse,
    ]
    """Check if the app server is ready

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    CreateChat: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.CreateChatRequest,
        app.app.v1alpha.chat_pb2.CreateChatResponse,
    ]
    """Create a chat

    Creates a chat.
    """
    ListChats: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.ListChatsRequest,
        app.app.v1alpha.chat_pb2.ListChatsResponse,
    ]
    """List chats

    Returns a list of chats.
    """
    UpdateChat: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.UpdateChatRequest,
        app.app.v1alpha.chat_pb2.UpdateChatResponse,
    ]
    """Update a chat

    Updates a chat.
    """
    DeleteChat: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.DeleteChatRequest,
        app.app.v1alpha.chat_pb2.DeleteChatResponse,
    ]
    """Delete a chat

    Deletes a chat.
    """
    CreateMessage: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.CreateMessageRequest,
        app.app.v1alpha.chat_pb2.CreateMessageResponse,
    ]
    """Create a message

    Creates a message.
    """
    ListMessages: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.ListMessagesRequest,
        app.app.v1alpha.chat_pb2.ListMessagesResponse,
    ]
    """List messages

    Returns a paginated list of messages.
    """
    UpdateMessage: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.UpdateMessageRequest,
        app.app.v1alpha.chat_pb2.UpdateMessageResponse,
    ]
    """Update a message

    Updates a message.
    """
    DeleteMessage: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.DeleteMessageRequest,
        app.app.v1alpha.chat_pb2.DeleteMessageResponse,
    ]
    """Delete a message

    Deletes a message.
    """
    Chat: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.ChatRequest,
        app.app.v1alpha.chat_pb2.ChatResponse,
    ]
    """Chat

    Chat sends a message asynchronously and streams back the response.
    This method is intended for real-time conversation with a chatbot
    and the response needs to be processed incrementally.
    """
    ListTables: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.ListTablesRequest,
        app.app.v1alpha.table_pb2.ListTablesResponse,
    ]
    """List tables

    Returns a paginated list of tables.
    """
    CreateTable: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.CreateTableRequest,
        app.app.v1alpha.table_pb2.CreateTableResponse,
    ]
    """Create a table

    Creates a table.
    """
    GetTable: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.GetTableRequest,
        app.app.v1alpha.table_pb2.GetTableResponse,
    ]
    """Get table

    Gets a table.
    """
    UpdateTable: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateTableRequest,
        app.app.v1alpha.table_pb2.UpdateTableResponse,
    ]
    """Update table

    Updates a table.
    """
    DeleteTable: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.DeleteTableRequest,
        app.app.v1alpha.table_pb2.DeleteTableResponse,
    ]
    """Delete table

    Deletes a table.
    """
    GetColumnDefinitions: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.GetColumnDefinitionsRequest,
        app.app.v1alpha.table_pb2.GetColumnDefinitionsResponse,
    ]
    """Get column definitions

    Gets column definitions for a table.
    """
    UpdateColumnDefinitions: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateColumnDefinitionsRequest,
        app.app.v1alpha.table_pb2.UpdateColumnDefinitionsResponse,
    ]
    """Update column definitions

    Updates column definitions for a table.
    """
    ListRows: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.ListRowsRequest,
        app.app.v1alpha.table_pb2.ListRowsResponse,
    ]
    """List rows

    Returns list of rows.
    """
    InsertRow: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.InsertRowRequest,
        app.app.v1alpha.table_pb2.InsertRowResponse,
    ]
    """Insert row

    Inserts a row into a table.
    """
    UpdateRow: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateRowRequest,
        app.app.v1alpha.table_pb2.UpdateRowResponse,
    ]
    """Update row

    Updates a row in a table.
    """
    UpdateRows: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateRowsRequest,
        app.app.v1alpha.table_pb2.UpdateRowsResponse,
    ]
    """Update rows

    Updates multiple rows in a table.
    """
    DeleteRow: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.DeleteRowRequest,
        app.app.v1alpha.table_pb2.DeleteRowResponse,
    ]
    """Delete row

    Deletes a row from a table.
    """
    DeleteRows: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.DeleteRowsRequest,
        app.app.v1alpha.table_pb2.DeleteRowsResponse,
    ]
    """Delete rows

    Deletes multiple rows from a table.
    """
    MoveRows: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.MoveRowsRequest,
        app.app.v1alpha.table_pb2.MoveRowsResponse,
    ]
    """Move row

    Moves a row to a new position in a table.
    """
    Export: grpc.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.ExportRequest,
        app.app.v1alpha.table_pb2.ExportResponse,
    ]
    """Export table

    Exports table data.
    """

class AppPublicServiceAsyncStub:
    """AppPublicService exposes the public endpoints that allow clients to
    manage apps.
    """

    Liveness: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.app_pb2.LivenessRequest,
        app.app.v1alpha.app_pb2.LivenessResponse,
    ]
    """Check if the app server is alive

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
    """
    Readiness: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.app_pb2.ReadinessRequest,
        app.app.v1alpha.app_pb2.ReadinessResponse,
    ]
    """Check if the app server is ready

    See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
    """
    CreateChat: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.CreateChatRequest,
        app.app.v1alpha.chat_pb2.CreateChatResponse,
    ]
    """Create a chat

    Creates a chat.
    """
    ListChats: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.ListChatsRequest,
        app.app.v1alpha.chat_pb2.ListChatsResponse,
    ]
    """List chats

    Returns a list of chats.
    """
    UpdateChat: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.UpdateChatRequest,
        app.app.v1alpha.chat_pb2.UpdateChatResponse,
    ]
    """Update a chat

    Updates a chat.
    """
    DeleteChat: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.DeleteChatRequest,
        app.app.v1alpha.chat_pb2.DeleteChatResponse,
    ]
    """Delete a chat

    Deletes a chat.
    """
    CreateMessage: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.CreateMessageRequest,
        app.app.v1alpha.chat_pb2.CreateMessageResponse,
    ]
    """Create a message

    Creates a message.
    """
    ListMessages: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.ListMessagesRequest,
        app.app.v1alpha.chat_pb2.ListMessagesResponse,
    ]
    """List messages

    Returns a paginated list of messages.
    """
    UpdateMessage: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.UpdateMessageRequest,
        app.app.v1alpha.chat_pb2.UpdateMessageResponse,
    ]
    """Update a message

    Updates a message.
    """
    DeleteMessage: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.DeleteMessageRequest,
        app.app.v1alpha.chat_pb2.DeleteMessageResponse,
    ]
    """Delete a message

    Deletes a message.
    """
    Chat: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.chat_pb2.ChatRequest,
        app.app.v1alpha.chat_pb2.ChatResponse,
    ]
    """Chat

    Chat sends a message asynchronously and streams back the response.
    This method is intended for real-time conversation with a chatbot
    and the response needs to be processed incrementally.
    """
    ListTables: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.ListTablesRequest,
        app.app.v1alpha.table_pb2.ListTablesResponse,
    ]
    """List tables

    Returns a paginated list of tables.
    """
    CreateTable: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.CreateTableRequest,
        app.app.v1alpha.table_pb2.CreateTableResponse,
    ]
    """Create a table

    Creates a table.
    """
    GetTable: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.GetTableRequest,
        app.app.v1alpha.table_pb2.GetTableResponse,
    ]
    """Get table

    Gets a table.
    """
    UpdateTable: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateTableRequest,
        app.app.v1alpha.table_pb2.UpdateTableResponse,
    ]
    """Update table

    Updates a table.
    """
    DeleteTable: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.DeleteTableRequest,
        app.app.v1alpha.table_pb2.DeleteTableResponse,
    ]
    """Delete table

    Deletes a table.
    """
    GetColumnDefinitions: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.GetColumnDefinitionsRequest,
        app.app.v1alpha.table_pb2.GetColumnDefinitionsResponse,
    ]
    """Get column definitions

    Gets column definitions for a table.
    """
    UpdateColumnDefinitions: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateColumnDefinitionsRequest,
        app.app.v1alpha.table_pb2.UpdateColumnDefinitionsResponse,
    ]
    """Update column definitions

    Updates column definitions for a table.
    """
    ListRows: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.ListRowsRequest,
        app.app.v1alpha.table_pb2.ListRowsResponse,
    ]
    """List rows

    Returns list of rows.
    """
    InsertRow: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.InsertRowRequest,
        app.app.v1alpha.table_pb2.InsertRowResponse,
    ]
    """Insert row

    Inserts a row into a table.
    """
    UpdateRow: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateRowRequest,
        app.app.v1alpha.table_pb2.UpdateRowResponse,
    ]
    """Update row

    Updates a row in a table.
    """
    UpdateRows: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.UpdateRowsRequest,
        app.app.v1alpha.table_pb2.UpdateRowsResponse,
    ]
    """Update rows

    Updates multiple rows in a table.
    """
    DeleteRow: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.DeleteRowRequest,
        app.app.v1alpha.table_pb2.DeleteRowResponse,
    ]
    """Delete row

    Deletes a row from a table.
    """
    DeleteRows: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.DeleteRowsRequest,
        app.app.v1alpha.table_pb2.DeleteRowsResponse,
    ]
    """Delete rows

    Deletes multiple rows from a table.
    """
    MoveRows: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.MoveRowsRequest,
        app.app.v1alpha.table_pb2.MoveRowsResponse,
    ]
    """Move row

    Moves a row to a new position in a table.
    """
    Export: grpc.aio.UnaryUnaryMultiCallable[
        app.app.v1alpha.table_pb2.ExportRequest,
        app.app.v1alpha.table_pb2.ExportResponse,
    ]
    """Export table

    Exports table data.
    """

class AppPublicServiceServicer(metaclass=abc.ABCMeta):
    """AppPublicService exposes the public endpoints that allow clients to
    manage apps.
    """

    @abc.abstractmethod
    def Liveness(
        self,
        request: app.app.v1alpha.app_pb2.LivenessRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.app_pb2.LivenessResponse, collections.abc.Awaitable[app.app.v1alpha.app_pb2.LivenessResponse]]:
        """Check if the app server is alive

        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        """
    @abc.abstractmethod
    def Readiness(
        self,
        request: app.app.v1alpha.app_pb2.ReadinessRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.app_pb2.ReadinessResponse, collections.abc.Awaitable[app.app.v1alpha.app_pb2.ReadinessResponse]]:
        """Check if the app server is ready

        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
        """
    @abc.abstractmethod
    def CreateChat(
        self,
        request: app.app.v1alpha.chat_pb2.CreateChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.CreateChatResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.CreateChatResponse]]:
        """Create a chat

        Creates a chat.
        """
    @abc.abstractmethod
    def ListChats(
        self,
        request: app.app.v1alpha.chat_pb2.ListChatsRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.ListChatsResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.ListChatsResponse]]:
        """List chats

        Returns a list of chats.
        """
    @abc.abstractmethod
    def UpdateChat(
        self,
        request: app.app.v1alpha.chat_pb2.UpdateChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.UpdateChatResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.UpdateChatResponse]]:
        """Update a chat

        Updates a chat.
        """
    @abc.abstractmethod
    def DeleteChat(
        self,
        request: app.app.v1alpha.chat_pb2.DeleteChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.DeleteChatResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.DeleteChatResponse]]:
        """Delete a chat

        Deletes a chat.
        """
    @abc.abstractmethod
    def CreateMessage(
        self,
        request: app.app.v1alpha.chat_pb2.CreateMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.CreateMessageResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.CreateMessageResponse]]:
        """Create a message

        Creates a message.
        """
    @abc.abstractmethod
    def ListMessages(
        self,
        request: app.app.v1alpha.chat_pb2.ListMessagesRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.ListMessagesResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.ListMessagesResponse]]:
        """List messages

        Returns a paginated list of messages.
        """
    @abc.abstractmethod
    def UpdateMessage(
        self,
        request: app.app.v1alpha.chat_pb2.UpdateMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.UpdateMessageResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.UpdateMessageResponse]]:
        """Update a message

        Updates a message.
        """
    @abc.abstractmethod
    def DeleteMessage(
        self,
        request: app.app.v1alpha.chat_pb2.DeleteMessageRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.DeleteMessageResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.DeleteMessageResponse]]:
        """Delete a message

        Deletes a message.
        """
    @abc.abstractmethod
    def Chat(
        self,
        request: app.app.v1alpha.chat_pb2.ChatRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.chat_pb2.ChatResponse, collections.abc.Awaitable[app.app.v1alpha.chat_pb2.ChatResponse]]:
        """Chat

        Chat sends a message asynchronously and streams back the response.
        This method is intended for real-time conversation with a chatbot
        and the response needs to be processed incrementally.
        """
    @abc.abstractmethod
    def ListTables(
        self,
        request: app.app.v1alpha.table_pb2.ListTablesRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.ListTablesResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.ListTablesResponse]]:
        """List tables

        Returns a paginated list of tables.
        """
    @abc.abstractmethod
    def CreateTable(
        self,
        request: app.app.v1alpha.table_pb2.CreateTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.CreateTableResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.CreateTableResponse]]:
        """Create a table

        Creates a table.
        """
    @abc.abstractmethod
    def GetTable(
        self,
        request: app.app.v1alpha.table_pb2.GetTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.GetTableResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.GetTableResponse]]:
        """Get table

        Gets a table.
        """
    @abc.abstractmethod
    def UpdateTable(
        self,
        request: app.app.v1alpha.table_pb2.UpdateTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.UpdateTableResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.UpdateTableResponse]]:
        """Update table

        Updates a table.
        """
    @abc.abstractmethod
    def DeleteTable(
        self,
        request: app.app.v1alpha.table_pb2.DeleteTableRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.DeleteTableResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.DeleteTableResponse]]:
        """Delete table

        Deletes a table.
        """
    @abc.abstractmethod
    def GetColumnDefinitions(
        self,
        request: app.app.v1alpha.table_pb2.GetColumnDefinitionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.GetColumnDefinitionsResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.GetColumnDefinitionsResponse]]:
        """Get column definitions

        Gets column definitions for a table.
        """
    @abc.abstractmethod
    def UpdateColumnDefinitions(
        self,
        request: app.app.v1alpha.table_pb2.UpdateColumnDefinitionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.UpdateColumnDefinitionsResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.UpdateColumnDefinitionsResponse]]:
        """Update column definitions

        Updates column definitions for a table.
        """
    @abc.abstractmethod
    def ListRows(
        self,
        request: app.app.v1alpha.table_pb2.ListRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.ListRowsResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.ListRowsResponse]]:
        """List rows

        Returns list of rows.
        """
    @abc.abstractmethod
    def InsertRow(
        self,
        request: app.app.v1alpha.table_pb2.InsertRowRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.InsertRowResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.InsertRowResponse]]:
        """Insert row

        Inserts a row into a table.
        """
    @abc.abstractmethod
    def UpdateRow(
        self,
        request: app.app.v1alpha.table_pb2.UpdateRowRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.UpdateRowResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.UpdateRowResponse]]:
        """Update row

        Updates a row in a table.
        """
    @abc.abstractmethod
    def UpdateRows(
        self,
        request: app.app.v1alpha.table_pb2.UpdateRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.UpdateRowsResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.UpdateRowsResponse]]:
        """Update rows

        Updates multiple rows in a table.
        """
    @abc.abstractmethod
    def DeleteRow(
        self,
        request: app.app.v1alpha.table_pb2.DeleteRowRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.DeleteRowResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.DeleteRowResponse]]:
        """Delete row

        Deletes a row from a table.
        """
    @abc.abstractmethod
    def DeleteRows(
        self,
        request: app.app.v1alpha.table_pb2.DeleteRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.DeleteRowsResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.DeleteRowsResponse]]:
        """Delete rows

        Deletes multiple rows from a table.
        """
    @abc.abstractmethod
    def MoveRows(
        self,
        request: app.app.v1alpha.table_pb2.MoveRowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.MoveRowsResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.MoveRowsResponse]]:
        """Move row

        Moves a row to a new position in a table.
        """
    @abc.abstractmethod
    def Export(
        self,
        request: app.app.v1alpha.table_pb2.ExportRequest,
        context: _ServicerContext,
    ) -> typing.Union[app.app.v1alpha.table_pb2.ExportResponse, collections.abc.Awaitable[app.app.v1alpha.table_pb2.ExportResponse]]:
        """Export table

        Exports table data.
        """

def add_AppPublicServiceServicer_to_server(servicer: AppPublicServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
